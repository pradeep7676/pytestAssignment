<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="5" time="35.470" timestamp="2022-08-04T16:30:58.757915" hostname="LAPTOP-D32TBTUD"><testcase classname="test_shopping.TestShopping" name="test_login[getData0]" time="8.922" /><testcase classname="test_shopping.TestShopping" name="test_searchProduct[searchproduct0]" time="3.747" /><testcase classname="test_shopping.TestShopping" name="test_addCart" time="9.422" /><testcase classname="test_shopping.TestShopping" name="test_removeCart" time="2.039"><failure message="selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;div class=&quot;_3dsJAO&quot;&gt;...&lt;/div&gt; is not clickable at point (347, 545). Other element would receive the click: &lt;div class=&quot;VUS-tD eBV0fb&quot;&gt;...&lt;/div&gt;&#10;  (Session info: chrome=103.0.5060.134)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x005CD953+2414931]&#10;&#09;Ordinal0 [0x0055F5E1+1963489]&#10;&#09;Ordinal0 [0x0044C6B8+837304]&#10;&#09;Ordinal0 [0x0047FC27+1047591]&#10;&#09;Ordinal0 [0x0047DC08+1039368]&#10;&#09;Ordinal0 [0x0047B90B+1030411]&#10;&#09;Ordinal0 [0x0047A659+1025625]&#10;&#09;Ordinal0 [0x00470293+983699]&#10;&#09;Ordinal0 [0x0049449C+1131676]&#10;&#09;Ordinal0 [0x0046FC74+982132]&#10;&#09;Ordinal0 [0x004946B4+1132212]&#10;&#09;Ordinal0 [0x004A4812+1198098]&#10;&#09;Ordinal0 [0x004942B6+1131190]&#10;&#09;Ordinal0 [0x0046E860+976992]&#10;&#09;Ordinal0 [0x0046F756+980822]&#10;&#09;GetHandleVerifier [0x0083CC62+2510274]&#10;&#09;GetHandleVerifier [0x0082F760+2455744]&#10;&#09;GetHandleVerifier [0x0065EABA+551962]&#10;&#09;GetHandleVerifier [0x0065D916+547446]&#10;&#09;Ordinal0 [0x00565F3B+1990459]&#10;&#09;Ordinal0 [0x0056A898+2009240]&#10;&#09;Ordinal0 [0x0056A985+2009477]&#10;&#09;Ordinal0 [0x00573AD1+2046673]&#10;&#09;BaseThreadInitThunk [0x761B6739+25]&#10;&#09;RtlGetFullPathName_UEx [0x77298FEF+1215]&#10;&#09;RtlGetFullPathName_UEx [0x77298FBD+1165]">self = &lt;tests.test_shopping.TestShopping object at 0x0000021AC7B5D190&gt;

    def test_removeCart(self):
        remove_obj = RemoveCart(self.driver)
    
        remove_obj.wait_explicit(remove_obj.removing)
        # removing from the cart
&gt;       remove_obj.remove_cart().click()

test_shopping.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\AppData\Local\Programs\Python\Python39\lib\site-packages\selenium\webdriver\remote\webelement.py:89: in click
    self._execute(Command.CLICK_ELEMENT)
..\..\..\AppData\Local\Programs\Python\Python39\lib\site-packages\selenium\webdriver\remote\webelement.py:773: in _execute
    return self._parent.execute(command, params)
..\..\..\AppData\Local\Programs\Python\Python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:430: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021AC7B5D670&gt;
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...unk [0x761B6739+25]\\n\\tRtlGetFullPathName_UEx [0x77298FEF+1215]\\n\\tRtlGetFullPathName_UEx [0x77298FBD+1165]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;div class="_3dsJAO"&gt;...&lt;/div&gt; is not clickable at point (347, 545). Other element would receive the click: &lt;div class="VUS-tD eBV0fb"&gt;...&lt;/div&gt;
E         (Session info: chrome=103.0.5060.134)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x005CD953+2414931]
E       	Ordinal0 [0x0055F5E1+1963489]
E       	Ordinal0 [0x0044C6B8+837304]
E       	Ordinal0 [0x0047FC27+1047591]
E       	Ordinal0 [0x0047DC08+1039368]
E       	Ordinal0 [0x0047B90B+1030411]
E       	Ordinal0 [0x0047A659+1025625]
E       	Ordinal0 [0x00470293+983699]
E       	Ordinal0 [0x0049449C+1131676]
E       	Ordinal0 [0x0046FC74+982132]
E       	Ordinal0 [0x004946B4+1132212]
E       	Ordinal0 [0x004A4812+1198098]
E       	Ordinal0 [0x004942B6+1131190]
E       	Ordinal0 [0x0046E860+976992]
E       	Ordinal0 [0x0046F756+980822]
E       	GetHandleVerifier [0x0083CC62+2510274]
E       	GetHandleVerifier [0x0082F760+2455744]
E       	GetHandleVerifier [0x0065EABA+551962]
E       	GetHandleVerifier [0x0065D916+547446]
E       	Ordinal0 [0x00565F3B+1990459]
E       	Ordinal0 [0x0056A898+2009240]
E       	Ordinal0 [0x0056A985+2009477]
E       	Ordinal0 [0x00573AD1+2046673]
E       	BaseThreadInitThunk [0x761B6739+25]
E       	RtlGetFullPathName_UEx [0x77298FEF+1215]
E       	RtlGetFullPathName_UEx [0x77298FBD+1165]

..\..\..\AppData\Local\Programs\Python\Python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: ElementClickInterceptedException</failure></testcase><testcase classname="test_shopping.TestShopping" name="test_logout" time="11.233"><failure message="selenium.common.exceptions.TimeoutException: Message: &#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x005CD953+2414931]&#10;&#09;Ordinal0 [0x0055F5E1+1963489]&#10;&#09;Ordinal0 [0x0044C6B8+837304]&#10;&#09;Ordinal0 [0x00479500+1021184]&#10;&#09;Ordinal0 [0x0047979B+1021851]&#10;&#09;Ordinal0 [0x004A6502+1205506]&#10;&#09;Ordinal0 [0x004944E4+1131748]&#10;&#09;Ordinal0 [0x004A4812+1198098]&#10;&#09;Ordinal0 [0x004942B6+1131190]&#10;&#09;Ordinal0 [0x0046E860+976992]&#10;&#09;Ordinal0 [0x0046F756+980822]&#10;&#09;GetHandleVerifier [0x0083CC62+2510274]&#10;&#09;GetHandleVerifier [0x0082F760+2455744]&#10;&#09;GetHandleVerifier [0x0065EABA+551962]&#10;&#09;GetHandleVerifier [0x0065D916+547446]&#10;&#09;Ordinal0 [0x00565F3B+1990459]&#10;&#09;Ordinal0 [0x0056A898+2009240]&#10;&#09;Ordinal0 [0x0056A985+2009477]&#10;&#09;Ordinal0 [0x00573AD1+2046673]&#10;&#09;BaseThreadInitThunk [0x761B6739+25]&#10;&#09;RtlGetFullPathName_UEx [0x77298FEF+1215]&#10;&#09;RtlGetFullPathName_UEx [0x77298FBD+1165]">self = &lt;tests.test_shopping.TestShopping object at 0x0000021AC7B5D310&gt;

    def test_logout(self):
        logout_obj = LogoutPage(self.driver)
    
        logout_obj.wait_explicit(logout_obj.logOption)
        logout_obj.log_option().click()
    
&gt;       logout_obj.wait_explicit(logout_obj.clickLogout)

test_shopping.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\pageObject\baseClass.py:9: in wait_explicit
    wait.until(expected_conditions.presence_of_element_located(path))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="a7ddfc73e5ef52ab2beed495319c2e79")&gt;
method = &lt;function presence_of_element_located.&lt;locals&gt;._predicate at 0x0000021AC7CDE0D0&gt;
message = ''

    def until(self, method, message=''):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, 'screen', None)
                stacktrace = getattr(exc, 'stacktrace', None)
            time.sleep(self._poll)
            if time.monotonic() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message: 
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x005CD953+2414931]
E       	Ordinal0 [0x0055F5E1+1963489]
E       	Ordinal0 [0x0044C6B8+837304]
E       	Ordinal0 [0x00479500+1021184]
E       	Ordinal0 [0x0047979B+1021851]
E       	Ordinal0 [0x004A6502+1205506]
E       	Ordinal0 [0x004944E4+1131748]
E       	Ordinal0 [0x004A4812+1198098]
E       	Ordinal0 [0x004942B6+1131190]
E       	Ordinal0 [0x0046E860+976992]
E       	Ordinal0 [0x0046F756+980822]
E       	GetHandleVerifier [0x0083CC62+2510274]
E       	GetHandleVerifier [0x0082F760+2455744]
E       	GetHandleVerifier [0x0065EABA+551962]
E       	GetHandleVerifier [0x0065D916+547446]
E       	Ordinal0 [0x00565F3B+1990459]
E       	Ordinal0 [0x0056A898+2009240]
E       	Ordinal0 [0x0056A985+2009477]
E       	Ordinal0 [0x00573AD1+2046673]
E       	BaseThreadInitThunk [0x761B6739+25]
E       	RtlGetFullPathName_UEx [0x77298FEF+1215]
E       	RtlGetFullPathName_UEx [0x77298FBD+1165]

..\..\..\AppData\Local\Programs\Python\Python39\lib\site-packages\selenium\webdriver\support\wait.py:87: TimeoutException</failure></testcase></testsuite></testsuites>